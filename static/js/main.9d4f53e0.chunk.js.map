{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","lat","lon","city","temp","feels","pressure","humidity","weather","isLoading","error","getWeather","bind","handleChange","this","console","log","setState","fetch","then","results","json","cod","catch","err","e","target","name","value","feels_like","className","onChange","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9d4f53e0.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state = ({\n      lat: null,\n      lon: null,\n      city: \"Enter your coordinates to start\",\n      temp: null,\n      feels: null,\n      pressure: null,\n      humidity: null,\n      weather: \"\",\n      isLoading: false,\n      error: null,\n    })\n    this.getWeather = this.getWeather.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  getWeather(){\n    let lat = this.state.lat\n    let lon = this.state.lon\n    console.log(\"lat:\", lat, \", lon:\", lon)\n    this.setState({isLoading: true})\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=imperial&appid=d8a524607ad60a28680d85e7cbcecc61`)\n      .then(results => results.json())\n      .then(results => {\n              console.log(results)\n              if(results.cod){\n                this.setState({error: 400, isLoading: false})\n              }\n              else{\n                this.setState({\n                  city: results['timezone'],\n                  temp: results['current']['temp'],\n                  feels: results['current']['feels_like'],\n                  pressure: results['current']['pressure'],\n                  humidity: results['current']['humidity'],\n                  weather: results['current']['weather'][0]['description'],\n                  error: null,\n                  isLoading: false,\n                })\n              }\n            }\n      )\n      .catch(err =>{ \n        console.log(err)\n        this.setState({isLoading: false})\n      })\n  }\n\n  handleChange(e){\n    this.setState({[e.target.name]: e.target.value})\n  }\n  \n  render(){\n    let temp, feels_like, pressure, humidity\n    let city = this.state.city\n    let weather = this.state.weather\n    let lat = this.state.lat\n    let lon = this.state.lon\n\n    if (this.state.error){\n      console.log(this.state.error)\n      city = this.state.error === 400 ? \"Invalid Latitude/Longitude\" : \"Something went wrong\"\n      temp = \"\"\n      feels_like = \"\"\n      pressure = \"\"\n      humidity = \"\"\n      weather = \"\"\n    }\n    else{\n      temp = (this.state.temp) ? \"Temperature: \" + this.state.temp + \" F\" : \"\"\n      feels_like = (this.state.feels) ? \"Feels Like: \" + this.state.feels + \" F\": \"\"\n      pressure = (this.state.pressure) ? \"Pressure: \" + this.state.pressure + \"hPa\": \"\"\n      humidity = (this.state.humidity) ? \"Humidity: \" + this.state.humidity + \"%\": \"\"\n    }\n\n    if(this.state.isLoading){\n      return(\n        <p>Loading.....</p>\n      )\n    }\n\n    return(\n      <div className='layout'>\n        <div className='input-section'>\n          <div className='lat'> \n            <label className='lat-label'>Latitude:</label>\n            <input className='lat-input' name ='lat' onChange={this.handleChange} placeholder='33.44'/>\n          </div>\n          <div className='lon'> \n            <label className='lon-label'>Longitude:</label>\n            <input className='lon-input' name ='lon' onChange={this.handleChange} placeholder='-94.04'/>\n          </div>\n          <label className='btn' \n          onClick={this.getWeather}>\n            Submit\n          </label>\n        </div>\n        <div className='curr-city'>\n          <div>{city}</div>\n          <div>{lat} {lon}</div>\n        </div>\n        <div className='weather-info'> \n          <div className='section1'>\n            <ul>\n              <li>{temp}</li>\n              <li>{feels_like}</li>\n              <li>{pressure}</li>\n              <li>{humidity}</li>\n            </ul>\n          </div>\n          <div className='section2'>\n              {weather}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}